@page "/Measurement/Samples"
@using Lab.Measurement.Localization;
@using Lab.Measurement.Permissions;
@using Lab.Measurement.Samples;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Notifications;
@inject ISampleAppService SampleAppService
@inject IUiNotificationService NotifiationService
@inject IStringLocalizer<MeasurementResource> L
@inject IAuthorizationService Authorization
@attribute [Authorize(Policy = MeasurementPermissions.Samples.Default)]

<div class="container">
    <Card>
        <CardHeader>
            <CardTitle>
                Samples LIST
            </CardTitle>
        </CardHeader>
        <CardBody>
            <!-- FORM FOR NEW SAMPLE ITEMS -->
            @if (HasCreatePermission)
            {
                <form id="NewItemForm" @onsubmit:preventDefault @onsubmit="() => Create()" class="row row-cols-lg-auto g-3 align-items-center">
                    <div class="col-12">
                      <div class="input-group">
                            <input name="NewTodoText" type="text" @bind-value="@NewValue" class="form-control" placeholder="enter text..." />
                      </div>
                    </div>
                    <div class="col-12">
                      <button type="submit" class="btn btn-primary">Submit</button>
                    </div>
                </form> 
             }
            <!-- SAMPLE LIST -->
            <ul id="SampleList">
                @foreach (var sample in samples)
                {
                    <li data-id="@sample.Id">
                        <i class="far fa-trash-alt"
                       @onclick="() => Delete(sample)"></i> @sample
                    </li>
                }
            </ul>
        </CardBody>
    </Card>
</div>

@code {
    private List<SampleDto> samples = new List<SampleDto>(); 

    private string NewValue { get; set; }

    private bool HasCreatePermission { get; set; }

    protected override async void OnInitialized()
    {
        // get list 
        samples = await SampleAppService.GetListAsync();

        // check permissions 
        HasCreatePermission = await Authorization.IsGrantedAsync(MeasurementPermissions.Samples.Create);
    }

    private async Task Delete(SampleDto item)
    {
        await SampleAppService.DeleteAsync(item.Id);
        await NotifiationService.Info("Deleted sample item.");
        samples.Remove(item); 
    }

    private async Task Create()
    {
        int newValue = 0;
        int.TryParse(NewValue, out newValue);

        var sampleDto = new SampleDto
            {
                Measurement = "Measurment 1",
                Value = newValue
            };

        var result = await SampleAppService.CreateAsync(sampleDto);
        samples.Add(result);
        NewValue = null;
    }
}
